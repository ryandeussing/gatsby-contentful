"use strict";

var PrettyError = require(`pretty-error`);

function getErrorFormatter() {
  var prettyError = new PrettyError();

  prettyError.skipNodeFiles();
  prettyError.skipPackage(`regenerator-runtime`, `graphql`, `core-js`
  // `static-site-generator-webpack-plugin`,
  // `tapable`, // webpack
  );

  prettyError.skip(function (traceLine, ln) {
    if (traceLine && traceLine.file === `asyncToGenerator.js`) return true;
    return false;
  });

  prettyError.appendStyle({
    "pretty-error": {
      marginTop: 1
    }
  });

  return prettyError;
}

/**
 * Convert a stringified webpack compilation error back into
 * an Error instance so it can be formatted properly
 * @param {string} errorStr
 */
function createErrorFromString(errorStr) {
  var _errorStr$split = errorStr.split(/\r\n|[\n\r]/g),
      message = _errorStr$split[0],
      rest = _errorStr$split.slice(1);
  // pull the message from the first line then remove the `Error:` prefix
  // FIXME: when https://github.com/AriaMinaei/pretty-error/pull/49 is merged


  var error = new Error();
  error.stack = [message.split(`:`).slice(1).join(`:`), rest.join(`\n`)].join(`\n`);
  error.name = `WebpackError`;
  return error;
}

/**
 * Format a html stage compilation error to only show stack lines
 * for 'render-page.js' the output file for those stages, since it contains
 * the relevant details for debugging.
 *
 * @param {Error} error
 */
function formatStaticBuildError(error) {
  // For HTML compilation issues we filter down the error
  // to only the bits that are relevant for debugging
  var formatter = getErrorFormatter();
  formatter.skip(function (traceLine) {
    return !traceLine || traceLine.file !== `render-page.js`;
  });
  return formatter.render(error);
}

module.exports = {
  createErrorFromString,
  getErrorFormatter,
  formatStaticBuildError
};
//# sourceMappingURL=errors.js.map