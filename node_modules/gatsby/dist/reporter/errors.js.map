{"version":3,"sources":["../../src/reporter/errors.js"],"names":["PrettyError","require","getErrorFormatter","prettyError","skipNodeFiles","skipPackage","skip","traceLine","ln","file","appendStyle","marginTop","createErrorFromString","errorStr","split","message","rest","error","Error","stack","slice","join","name","formatStaticBuildError","formatter","render","module","exports"],"mappings":";;AAEA,IAAMA,cAAcC,QAAS,cAAT,CAApB;;AAEA,SAASC,iBAAT,GAA6B;AAC3B,MAAMC,cAAc,IAAIH,WAAJ,EAApB;;AAEAG,cAAYC,aAAZ;AACAD,cAAYE,WAAZ,CACG,qBADH,EAEG,SAFH,EAGG;AACD;AACA;AALF;;AAQAF,cAAYG,IAAZ,CAAiB,UAACC,SAAD,EAAYC,EAAZ,EAAmB;AAClC,QAAID,aAAaA,UAAUE,IAAV,KAAoB,qBAArC,EAA2D,OAAO,IAAP;AAC3D,WAAO,KAAP;AACD,GAHD;;AAKAN,cAAYO,WAAZ,CAAwB;AACtB,oBAAgB;AACdC,iBAAW;AADG;AADM,GAAxB;;AAMA,SAAOR,WAAP;AACD;;AAED;;;;;AAKA,SAASS,qBAAT,CAA+BC,QAA/B,EAAiD;AAAA,wBACtBA,SAASC,KAAT,CAAe,cAAf,CADsB;AAAA,MAC1CC,OAD0C;AAAA,MAC9BC,IAD8B;AAE/C;AACA;;;AACA,MAAIC,QAAQ,IAAIC,KAAJ,EAAZ;AACAD,QAAME,KAAN,GAAc,CACZJ,QACGD,KADH,CACU,GADV,EAEGM,KAFH,CAES,CAFT,EAGGC,IAHH,CAGS,GAHT,CADY,EAKZL,KAAKK,IAAL,CAAW,IAAX,CALY,EAMZA,IANY,CAMN,IANM,CAAd;AAOAJ,QAAMK,IAAN,GAAc,cAAd;AACA,SAAOL,KAAP;AACD;;AAED;;;;;;;AAOA,SAASM,sBAAT,CAAgCN,KAAhC,EAA8C;AAC5C;AACA;AACA,MAAMO,YAAYtB,mBAAlB;AACAsB,YAAUlB,IAAV,CAAe;AAAA,WAAa,CAACC,SAAD,IAAcA,UAAUE,IAAV,KAAoB,gBAA/C;AAAA,GAAf;AACA,SAAOe,UAAUC,MAAV,CAAiBR,KAAjB,CAAP;AACD;;AAEDS,OAAOC,OAAP,GAAiB;AACff,uBADe;AAEfV,mBAFe;AAGfqB;AAHe,CAAjB","file":"errors.js","sourcesContent":["// @flow\n\nconst PrettyError = require(`pretty-error`)\n\nfunction getErrorFormatter() {\n  const prettyError = new PrettyError()\n\n  prettyError.skipNodeFiles()\n  prettyError.skipPackage(\n    `regenerator-runtime`,\n    `graphql`,\n    `core-js`\n    // `static-site-generator-webpack-plugin`,\n    // `tapable`, // webpack\n  )\n\n  prettyError.skip((traceLine, ln) => {\n    if (traceLine && traceLine.file === `asyncToGenerator.js`) return true\n    return false\n  })\n\n  prettyError.appendStyle({\n    \"pretty-error\": {\n      marginTop: 1,\n    },\n  })\n\n  return prettyError\n}\n\n/**\n * Convert a stringified webpack compilation error back into\n * an Error instance so it can be formatted properly\n * @param {string} errorStr\n */\nfunction createErrorFromString(errorStr: string) {\n  let [message, ...rest] = errorStr.split(/\\r\\n|[\\n\\r]/g)\n  // pull the message from the first line then remove the `Error:` prefix\n  // FIXME: when https://github.com/AriaMinaei/pretty-error/pull/49 is merged\n  let error = new Error()\n  error.stack = [\n    message\n      .split(`:`)\n      .slice(1)\n      .join(`:`),\n    rest.join(`\\n`),\n  ].join(`\\n`)\n  error.name = `WebpackError`\n  return error\n}\n\n/**\n * Format a html stage compilation error to only show stack lines\n * for 'render-page.js' the output file for those stages, since it contains\n * the relevant details for debugging.\n *\n * @param {Error} error\n */\nfunction formatStaticBuildError(error: Error) {\n  // For HTML compilation issues we filter down the error\n  // to only the bits that are relevant for debugging\n  const formatter = getErrorFormatter()\n  formatter.skip(traceLine => !traceLine || traceLine.file !== `render-page.js`)\n  return formatter.render(error)\n}\n\nmodule.exports = {\n  createErrorFromString,\n  getErrorFormatter,\n  formatStaticBuildError,\n}\n"]}